<pre>
                    ,____
                    |---.\
            ___     |    `
           / .-\  ./=)
          |  |"|_/\/|
          ;  |-;| /_|
         / \_| |/ \ |
        /      \/\( |
        |   /  |` ) |
        /   \ _/    |
       /--._/  \    |
       `/|)    |    /
         /     |   |
       .'      |   |
      /         \  |
     (_.-.__.__./  /
</pre>

h1. Grim

Grim is a simple gem for extracting (reaping) a page from a pdf and converting it to an image as well as extract the text from the page as a string. It basically gives you an easy to use api to ghostscript, imagemagick, and pdftotext specific to this use case.

h2. Prerequisites

You will need ghostscript, imagemagick, and poppler installed. On the Mac (OSX) I highly recommend using "Homebrew":http://mxcl.github.com/homebrew/ to get them installed.

<pre><code>
  brew install ghostscript imagemagick poppler
</code></pre>

h2. Installation

<pre><code>
  gem install grim
</code></pre>

h2. Usage

<pre><code>
  pdf   = Grim.reap("/path/to/pdf")         # returns Grim::Pdf instance for pdf
  count = pdf.count                         # returns the number of pages in the pdf
          pdf[3].save('/path/to/image.png') # will return true if page was saved or false if not
  text  = pdf[3].text                       # returns text as a String

  # You may pass options to the save method, including `:width`, `:density`,
  # `:quality`, `:colorspace`, and `:extra`. The last one, `:extra`, takes an
  # Array of processor specific options. In this example I pass in two optional
  # ImageMagick specific command line options.
  pdf[3].save('/path/to/image.png', :extra => ["-flatten", "-background white"])

  pdf.each do |page|
    puts page.text
  end
</pre></code>

We also support using other processors (the default is whatever version of Imagemagick/Ghostscript is in your path).

<pre><code>
  # specifying one processor with specific ImageMagick and GhostScript paths
  Grim.processor =  Grim::ImageMagickProcessor.new({:imagemagick_path => "/path/to/convert", :ghostscript_path => "/path/to/gs"})

  # multiple processors with fallback if first fails, useful if you need multiple versions of convert/gs
  Grim.processor = Grim::MultiProcessor.new([
    Grim::ImageMagickProcessor.new({:imagemagick_path => "/path/to/6.7/convert", :ghostscript_path => "/path/to/9.04/gs"}),
    Grim::ImageMagickProcessor.new({:imagemagick_path => "/path/to/6.6/convert", :ghostscript_path => "/path/to/9.02/gs"})
  ])

  pdf = Grim.reap('/path/to/pdf)
</code></pre>

h2. Reference

* "jonmagic.com: Grim":http://jonmagic.com/blog/archives/2011/09/06/grim/
* "jonmagic.com: Grim MultiProcessor":http://jonmagic.com/blog/archives/2011/10/06/grim-multiprocessor-to-the-rescue/

h2. Contributors

* "@jonmagic":https://github.com/jonmagic
* "@jnunemaker":https://github.com/jnunemaker
* "@bryckbost":https://github.com/bryckbost
* "@bkeepers":https://github.com/bkeepers
* "@BobaFaux":https://github.com/BobaFaux

h2. License

See LICENSE for details.
